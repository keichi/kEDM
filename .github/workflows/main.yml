name: build

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    branches:
      - master

env:
  OMP_PROC_BIND: false

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Run clang-format
      run: |
        git ls-files '*.hpp' '*.cpp' | xargs clang-format -i
        git diff --exit-code

  build-linux-gpu:
    strategy:
      matrix:
        cxx: [g++-11]
      fail-fast: false
    runs-on: ubuntu-latest
    container:
      image: nvidia/cuda:11.8.0-devel-ubuntu22.04
    steps:
    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y cmake git libhdf5-dev
      env:
        DEBIAN_FRONTEND: noninteractive
    - uses: actions/checkout@v3
    - name: Build kEDM
      run: |
        mkdir build
        cd build
        cmake \
          -DCMAKE_BUILD_TYPE=Debug \
          -DKEDM_ENABLE_GPU=ON \
          -DKEDM_ENABLE_TESTS=OFF \
          -DKokkos_ARCH_AMPERE80=ON ..
        make -j $(nproc)
      env:
        NVCC_WRAPPER_DEFAULT_COMPILER: ${{ matrix.cxx }}

  build-linux-cpu:
    strategy:
      matrix:
        cxx: [clang++-14, g++-12]
      fail-fast: false
    runs-on: ubuntu-22.04
    env:
      CXX: ${{ matrix.cxx }}
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libhdf5-dev libopenblas-serial-dev liblapacke-dev libomp-14-dev
    - name: Build kEDM
      run: |
        mkdir build
        cd build
        cmake \
          -DCMAKE_BUILD_TYPE=Debug \
          -DKokkos_ARCH_HSW=ON \
          -DKEDM_ENABLE_CPU=ON \
          ..
        make -j $(nproc)
    - name: Run C++ unit tests
      run: ctest
      working-directory: build
    - name: Build and install Python wheel
      run: pip3 install -v '.[test]'
    - name: Run Python unit tests
      run: pytest python

  build-macos:
    strategy:
      matrix:
        cxx: [clang++, g++-12]
      fail-fast: false
    runs-on: macOS-11
    env:
      CXX: ${{ matrix.cxx }}
    steps:
    - uses: actions/checkout@v3
    - name: Install HDF5
      run: brew install hdf5
    - name: Install libomp
      if: startsWith(matrix.cxx, 'clang++')
      run: |
        scripts/install_libomp.sh
    - name: Build kEDM (gcc)
      if: startsWith(matrix.cxx, 'g++')
      run: |
        mkdir build
        cd build
        cmake \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_INCLUDE_PATH=/usr/local/include \
          -DKEDM_ENABLE_CPU=ON \
          ..
        make -j $(sysctl -n hw.physicalcpu_max)
    - name: Build kEDM (clang)
      if: startsWith(matrix.cxx, 'clang++')
      run: |
        mkdir build
        cd build
        cmake \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_FLAGS="-I/usr/local/include -Xpreprocessor -fopenmp" \
          -DCMAKE_EXE_LINKER_FLAGS="-L/usr/local/lib -lomp" \
          -DCMAKE_SHARED_LINKER_FLAGS="-L/usr/local/lib -lomp" \
          -DKEDM_ENABLE_CPU=ON \
          ..
        make -j $(sysctl -n hw.physicalcpu_max)
    - name: Run C++ unit tests
      run: ctest
      working-directory: build

  build-wheels-cuda11x:
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
      - name: Build wheels
        uses: joerick/cibuildwheel@v2.14.0
        env:
          CIBW_BUILD: cp3*-manylinux_x86_64
          CIBW_BEFORE_ALL_LINUX: >
            yum-config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/cuda-rhel7.repo &&
            yum install -y cuda-compiler-11-2 libcublas-devel-11-2 cuda-cudart-devel-11-2 cuda-driver-devel-11-2 &&
            update-alternatives --install /usr/local/cuda cuda /usr/local/cuda-11.2 112
          CIBW_TEST_SKIP: "*"
          CIBW_ENVIRONMENT: >
            CMAKE_ARGS='-DKEDM_ENABLE_GPU=ON -DKokkos_ARCH_VOLTA70=ON'
            PATH=/usr/local/cuda/bin:$PATH
            KEDM_PACKAGE_NAME=kedm-cuda11x
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: auditwheel repair -w {dest_dir} --exclude libcublas.so.11 --exclude libcublasLt.so.11 --exclude libcuda.so.1 {wheel}
      - uses: actions/upload-artifact@v3
        with:
          name: wheels-cuda11x
          path: ./wheelhouse/*.whl

  build-wheels-cuda12x:
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
      - name: Build wheels
        uses: joerick/cibuildwheel@v2.14.0
        env:
          CIBW_BUILD: cp3*-manylinux_x86_64
          CIBW_BEFORE_ALL_LINUX: >
            yum-config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/cuda-rhel7.repo &&
            yum install -y cuda-compiler-12-0 libcublas-devel-12-0 cuda-cudart-devel-12-0 cuda-driver-devel-12-0
          CIBW_TEST_SKIP: "*"
          CIBW_ENVIRONMENT: >
            CMAKE_ARGS='-DKEDM_ENABLE_GPU=ON -DKokkos_ARCH_VOLTA70=ON'
            PATH=/usr/local/cuda/bin:$PATH
            KEDM_PACKAGE_NAME=kedm-cuda12x
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: auditwheel repair -w {dest_dir} --exclude libcublas.so.12 --exclude libcublasLt.so.12 --exclude libcuda.so.1 {wheel}
      - uses: actions/upload-artifact@v3
        with:
          name: wheels-cuda12x
          path: ./wheelhouse/*.whl

  build-wheels:
    strategy:
      matrix:
        os: [ubuntu-22.04, macOS-11]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
      - name: Build wheels
        uses: joerick/cibuildwheel@v2.14.0
        env:
          CIBW_BUILD: cp3*-manylinux_x86_64 cp3*-macosx*
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_BEFORE_ALL_LINUX: >
            yum install -y openblas-devel &&
            ln -sf /usr/lib64/libopenblaso.so /usr/lib64/libopenblas.so
          CIBW_BEFORE_ALL_MACOS: "scripts/install_libomp.sh"
          CIBW_ENVIRONMENT_LINUX: CMAKE_ARGS='-DKokkos_ARCH_HSW=ON'
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest {project}/python
          CIBW_TEST_SKIP: "*_arm64"
      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./wheelhouse/*.whl

  publish-wheels:
    needs: [build-wheels, build-wheels-cuda11x, build-wheels-cuda12x]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/p/kedm
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4.1.7
        with:
          name: wheels
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1

  publish-wheels-cuda11x:
    needs: [build-wheels, build-wheels-cuda11x, build-wheels-cuda12x]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/p/kedm-cuda11x
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4.1.7
        with:
          name: wheels-cuda11x
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1

  publish-wheels-cuda12x:
    needs: [build-wheels, build-wheels-cuda11x, build-wheels-cuda12x]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/p/kedm-cuda12x
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4.1.7
        with:
          name: wheels-cuda12x
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
